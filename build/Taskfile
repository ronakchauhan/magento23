#!/usr/bin/env bash
# b5 Taskfile, see https://git.team23.de/build/b5 for details

##########################################################
# Default Tasks which has to be defined by convention    #
# These tasks are used to install, update, run and       #
# interact with this application.                        #
##########################################################

task:install() {
     docker:install
     composer install
     npm install
     template:render --overwrite ask-if-older templates/config.local.yml.jinja2 config.local.yml
 }


task:update() {
    docker:update
    composer install
    npm install
}

task:run() {
    docker:docker-compose up "$@"
}

task:halt() {
    docker:docker-compose down "$@"
}

task:shell() {
    docker:container_run "${1:-web}" /bin/bash
}

task:docker-compose() {
    docker:docker-compose "$@"
}

##########################################################
# Helper Tasks to run cli tools in the docker container  #
# These commands are partly defined in config.yml        #
##########################################################

magento() {
    docker:command:magento "$@"
}

task:magento() {
    magento "$@"
}

composer() { # composer module will now run composer in docker
    docker:command:composer "$@"
}

npm() { # npm module will now run composer in docker
    docker:command:npm "$@"
}

task:npm() {
    npm "$@"
}

task:composer() {
    composer "$@"
}

magerun() {
    docker:command:magerun "$@"
}

task:magerun() {
    magerun "$@"
}

# remove static files and cache
# this is particularly useful if magento static:upgrade does not generate static contents in developer mode
task:hardreset:static(){
	rm -rf "${CONFIG_paths_web}/generated/"* && \
    rm -rf "${CONFIG_paths_web}/pub/static/"* && \
    rm -rf "${CONFIG_paths_web}/var/view_preprocessed/"* && \
    rm -rf "${CONFIG_paths_web}/var/cache/"*
}

task:compile-di(){
    magento setup:di:compile
}

task:static-content(){
    magento setup:static-content:deploy en_US de_DE --exclude-theme Magento/luma --force
}

task:magento:setup() {
    magento setup:install \
        --base-url="${CONFIG_application_devconfig_base_url}" \
        --db-host="${CONFIG_application_database_host}" \
        --db-name="${CONFIG_application_database_database}" \
        --db-user="${CONFIG_application_database_username}" \
        --db-password="${CONFIG_application_database_password}" \
        --admin-firstname="${CONFIG_application_database_admin_firstname}" \
        --admin-lastname="${CONFIG_application_database_admin_lastname}" \
        --admin-email="${CONFIG_application_database_admin_email}" \
        --admin-user="${CONFIG_application_database_admin_user}" \
        --admin-password="${CONFIG_application_database_admin_password}" \
        --language="de_DE" \
        --currency="EUR" \
        --timezone="Europe/Berlin" \
        --use-rewrites="1" \
        --backend-frontname="admin"
}

##########################################################
# Database Tasks for importing and exporting sql dumps   #
##########################################################
#task:db:download() {
#    #mkdir -p "${CONFIG_paths_db}" && \
#    #ssh no7 -- "cd /var/www/v2.no7.de/private/magento/current && /opt/php-7.2.14/bin/php /var/www/v2.no7.de/private/magento/n98-magerun2.phar db:dump --compression=gzip --stdout" > "${CONFIG_paths_db}/${CONFIG_project_key}_live_$( date "+%Y-%m-%d" ).sql.gz"
#}

task:db:export() {
    mkdir -p "${CONFIG_paths_db}" && \
    docker:container_run --pipe-out --force-exec "${CONFIG_application_database_host}" mysqldump \
    --default-character-set=utf8 --set-charset --single-transaction --disable-keys \
                        -h "${CONFIG_application_database_host}" --protocol=TCP \
                        -u "${CONFIG_application_database_username}" \
                        "-p${CONFIG_application_database_password}" \
                        "${CONFIG_application_database_database}" \
                        | gzip \
                        > "${CONFIG_paths_db}/${CONFIG_project_key}_local_$( date "+%Y-%m-%d" ).sql.gz"
}

task:db:import() {
    local DUMPNAME=${1:-}
    if [ -z "$DUMPNAME" ]
    then
        DUMPNAME="live"
    fi
    case "${DUMPNAME}" in
        live)
            DUMPNAME="${CONFIG_project_key}_live_$( date "+%Y-%m-%d" ).sql.gz"
            ;;
        local)
            DUMPNAME="${CONFIG_project_key}_local_$( date "+%Y-%m-%d" ).sql.gz"
            ;;
    esac
    if [ ! -e "${CONFIG_paths_db}/${DUMPNAME}" ]
    then
        echo "Dump does not exist"
        echo "(${CONFIG_paths_db}/${DUMPNAME})"
        return 1
    fi
    cat "${CONFIG_paths_db}/${DUMPNAME}" | gunzip | ./mysql-quick-load \
        | docker:container_run --pipe-in --force-exec ${CONFIG_application_database_host} mysql \
                               -h "${CONFIG_application_database_host}" --protocol=TCP \
                               -u "${CONFIG_application_database_username}" \
                               "-p${CONFIG_application_database_password}" \
                               -D "${CONFIG_application_database_database}"
}

task:db:prepare_dev() {
    template:render templates/devconfig.sql.jinja2 \
        | docker:container_run --pipe-in --force-exec ${CONFIG_application_database_host} mysql \
                               -h "${CONFIG_application_database_host}" --protocol=TCP \
                               -u "${CONFIG_application_database_username}" \
                               "-p${CONFIG_application_database_password}" \
                               -D "${CONFIG_application_database_database}"
}

task:css() {
    # Remove existing already compiled files before recompiling the CSS. Otherwise gulp will process
    # only the LESS files that it already knows, and ignore new files added since the last cleanup.
    rm -rf "${CONFIG_paths_web}/pub/static/"*
    rm -rf "${CONFIG_paths_web}/var/view_preprocessed/"*

    utils:gulp exec --sitness
    task:less
}

task:db:prepare_dev() {
    template:render templates/devconfig.sql.jinja2 \
        | docker:container_run --pipe-in --force-exec ${CONFIG_application_database_host} mysql \
                               -h "${CONFIG_application_database_host}" --protocol=TCP \
                               -u "${CONFIG_application_database_username}" \
                               "-p${CONFIG_application_database_password}" \
                               -D "${CONFIG_application_database_database}"
}
